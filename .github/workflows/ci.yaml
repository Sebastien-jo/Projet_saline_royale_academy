# This is a basic workflow to help you get started with Actions

name: CI

on:
  workflow_dispatch:
  push:
    branches:
      - dev
      - main
  pull_request:
    branches:
      - dev
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
#  build-and-push-symfony:
#    runs-on: ubuntu-latest
#    permissions:
#      contents: read
#      packages: write
#
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v3
#
#      - name: Log in to the Container registry
#        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
#        with:
#          registry: ${{ env.REGISTRY }}
#          username: ${{ github.actor }}
#          password: ${{ secrets.GITHUB_TOKEN }}
#
#      - name: Extract metadata (tags, labels) for Docker
#        id: meta
#        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
#        with:
#          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-symfony
#          tags: |
#            latest
#
#      - name: Build and push Docker image
#        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
#        with:
#          context: .
#          file: ./docker/prod/alpine/Dockerfile
#          push: true
#          tags: ${{ steps.meta.outputs.tags }}
#          labels: ${{ steps.meta.outputs.labels }}
#
#  build-and-push-nginx:
#    runs-on: ubuntu-latest
#    permissions:
#      contents: read
#      packages: write
#
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v3
#
#      - name: Log in to the Container registry
#        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
#        with:
#          registry: ${{ env.REGISTRY }}
#          username: ${{ github.actor }}
#          password: ${{ secrets.GITHUB_TOKEN }}
#
#      - name: Extract metadata (tags, labels) for Docker
#        id: meta
#        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
#        with:
#          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-nginx
#          tags: |
#            latest
#
#      - name: Build and push Docker image
#        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
#        with:
#          context: .
#          file: ./docker/prod/nginx/Dockerfile
#          push: true
#          tags: ${{ steps.meta.outputs.tags }}
#          labels: ${{ steps.meta.outputs.labels }}

  tests-php:
#    needs: build-and-push-symfony
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/sebastien-jo/projet_saline_royale_academy-symfony:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: php-cs-fixer
        shell: bash
        run: |
          cd /var/www/symfony
          ./vendor/bin/php-cs-fixer fix --diff --config=.php_cs.strict $@

      - name: Rector
        shell: bash
        run: |
          cd /var/www/symfony
          ./vendor/bin/rector process `git diff --name-only --cached --diff-filter=d | grep "\.php"` --dry-run

      - name: Phpstan
        shell: bash
        run: |
          cd /var/www/symfony
          php -d memory_limit=-1 ./vendor/bin/phpstan clear-result-cache
          php -d memory_limit=-1 ./vendor/bin/phpstan

  tests:
    name: Running behat tests
    runs-on: ubuntu-latest
    services:
      mariadb:
        image: mariadb:10.11
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: false
          MYSQL_ROOT_PASSWORD: azerty
          MYSQL_DATABASE: saline-academy
        ports:
          - 3306/tcp
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    strategy:
      fail-fast: true
      matrix:
        php-versions: ['8.2']
    container:
      image: ghcr.io/sebastien-jo/projet_saline_royale_academy-symfony:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: create database
        shell: bash
        run: |
          cd /var/www/symfony
          composer require --dev symfony/orm-pack
          bin/console doctrine:database:drop --if-exists --force --env=test
          bin/console doctrine:database:create --if-not-exists --env=test
        env:
          DATABASE_URL: pdo_mysql://root:azerty@127.0.0.1:${{ job.services.mysql.ports['3306'] }}/saline-academy
          
